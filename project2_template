
<!-- template for Project 2 - CS 422 - Spring 2016 - Group 2 -->

<!DOCTYPE html>    
<head>
    <meta charset="utf-8">
    <title>Project 2 - Group 25</title>
  
  <!-- Get version 1.5.0 of Fabric.js from CDN -->
  <!--<script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/1.5.0/fabric.min.js" ></script>-->
  <script type="text/javascript" src="offlineFabric.js"></script>


</head>

<body onload="setClock(); setTemp(); setDate();">
    <!-- canvas tag for Fabric.js to draw into -->
    <!-- set this to some appropriate size for your development work -->
    <!-- but keep the same aspect ratio -->
    <!-- we will use width="2714" height="2200" for presentations and evaluation -->
    <div class="canvas-container" style="width: 2714px; height: 2200px; position: relative; -webkit-user-select: none;" >
      <canvas id="c" width="2714" height="2200" style="border: 2px solid black; position: absolute; width: 2714px; height: 2200px; left: 0px; top: 0px; -webkit-user-select: none;" class="lower-canvas" ></canvas>
    </div>

 
<script>

// the aspect ratios given here are not quite tall enough for a 36" x 80" door
// we are assuming bottom 15 inches of the door are not part of the display. 
// that part contains lots of necessary electronics so the bottom of the door
// sits off the bottom of our display wall. You are implementing the interface
// for the top 65" of the display / door


// within the code below I assume I am drawing into a 1220x990 box
// then I can scale the group to whatever size the final canvas is
  var localHeight = 2200;
  var localWidth = 2714;
  var doorWidth = 1235;
  var topLeftInsideDoor = .2 * (localWidth-(2*doorWidth));
  var topLeftOutsideDoor = localWidth - topLeftInsideDoor - doorWidth;
  var charmAppHW = doorWidth / 6;
  var quarterDoorHeight = localHeight / 4;
  var charmOffsetY = (localHeight - (localHeight * .75) - charmAppHW) / 2;
  var charmOffsetX = doorWidth / 18;
  var userOffsetX = charmOffsetX / 2;
  var userOffsetY = charmOffsetY / 2;
  var doorKnobStartY = .47 * localHeight;
  var doorKnobRadius = 75;
  var insideKnobStartX = topLeftInsideDoor + doorWidth - doorKnobRadius - charmOffsetX;
  var outsideKnobStartX = topLeftOutsideDoor + doorKnobRadius + charmOffsetX;
  var userPic, emergencyPic, appPic, settingsPic, weatherPic, devinPic, tomPic, mikePic, mattPic, devinText;

  var canvas = this.__canvas = new fabric.Canvas('c');
  var military = false;
  var celsius = false
;

  var userSelect = true;

  // set background to blue to make it easier to see it
  canvas.backgroundColor = "#DDDDDD";  // light grey

// need 36 wide instead of 40 as now

//-------------DEBUG------------------------------
var debug = new fabric.Text("DEBUG",{  
  left: topLeftOutsideDoor,
  top: 0,
  originX: 'left',
  originY: 'top',
  fontWeight: 'bold',
  shadow: "rgba(0,0,0,0.2) 0px 0px 10px",
  visible: true,
  fontFamily: 'droid serif',
  fontSize: 50,
  lockMovementX: true,
  lockMovementY: true
});

function debugLog()
{
  var log = "UserIcon:" + userIcon.top + "\n" +
            "UserPic:" + userPic.top + "\n" +
            "AppIcon:" + appIcon.top + "\n" +
            "AppPic:" + appPic.top + "\n" +
            "EmergencyIcon:" + emergencyIcon.top + "\n" +
            "EmergnecyPic:" + emergencyPic.top + "\n" +
            "SettingsIcon:" + settingsIcon.top + "\n" +
            "SettingsPic:" + settingsPic.top + "\n";
  debug.setText(log);
}
//---------END-DEBUG------------------------------



//--------Date-and-Time ---------------------------

function setClock()
{
  var today = new Date();
  var h = today.getHours();
  var m = today.getMinutes();
  amPm.setText("");
  if(!military){
    h >= 12 ? amPm.setText("PM") : amPm.setText("AM");
    h = h > 12 ? h - 12 : h;
  }
  m = m < 10 ? "0" + m : m;
  clock.setText(h + ":" + m);
  canvas.renderAll();
  setTimeout(setClock,1000);
}

function setDate()
{
  var today = new Date();
  var d = today.getDate();
  var m = today.getMonth() + 1;
  var y = today.getFullYear();

  date.setText(m + "/" + d + "/" + y);
  canvas.renderAll();
}

var clock = new fabric.Text("",{  
  left: topLeftInsideDoor + (doorWidth * (13/27)),
  top: localHeight/16,
  originX: 'center',
  originY: 'center',
  fontWeight: 'bold',
  shadow: "rgba(0,0,0,0.2) 0px 0px 10px",
  visible: true,
  fontFamily: 'droid serif',
  fontSize: 175,
  lockMovementX: true,
  lockMovementY: true
});

var date = new fabric.Text("",{
  left: topLeftInsideDoor + (doorWidth * (13/27)),
  top: localHeight/8,
  originX: 'center',
  originY: 'center',
  fontWeight: 'bold',
  shadow: "rgba(0,0,0,0.2) 0px 0px 10px",
  visible: true,
  fontFamily: 'droid serif',
  fontSize: 75,
  lockMovementX: true,
  lockMovementY: true
});

var amPm = new fabric.Text("",{
  left: clock.getLeft() + 315,
  top: clock.getTop() + 70,
  originX: 'right',
  originY: 'bottom',
  fontWeight: 'bold',
  shadow: "rgba(0,0,0,0.2) 0px 0px 10px",
  visible: true,
  fontFamily: 'droid serif',
  fontSize: 70,
  lockMovementX: true,
  lockMovementY: true
});

//----END-DATE-AND-TIME----------------------------


//---DOOR-ELEMENTS---------------------------------

var insideDoor = new fabric.Rect({
  left: topLeftInsideDoor,
  top: 0,
  fill: 'white',
  stroke: 'black',
  width: doorWidth,
  height: localHeight,
  angle: 0
});

// the doors will not be selectable or movable
insideDoor.hasControls = insideDoor.hasBorders = false;
insideDoor.lockMovementX = insideDoor.lockMovementY = true;


var outsideDoor = new fabric.Rect({
  left: topLeftOutsideDoor,
  top: 0,
  fill: 'white',
  stroke: 'black',
  width: doorWidth,
  height: localHeight,
  angle: 0
});

outsideDoor.hasControls = outsideDoor.hasBorders = false;
outsideDoor.lockMovementX = outsideDoor.lockMovementY = true;

  
// create a circle for the shower head location
var insideHandle = new fabric.Circle({
  radius: doorKnobRadius, fill: 'grey', left: insideKnobStartX , top: doorKnobStartY,   originX: 'center',
  originY: 'center',
  lockMovementX: true,
  lockMovementY: true 
});

// create a circle for the shower head location
var outsideHandle = new fabric.Circle({
  radius: doorKnobRadius, fill: 'grey', left: outsideKnobStartX, top: doorKnobStartY,   originX: 'center',
  originY: 'center',
  lockMovementX: true,
  lockMovementY: true
});

//--END-DOOR-ELEMENTS---------------------------------


//-----WEATHER----------------------------------------
var weatherIcon = new fabric.Image.fromURL('resources/clouds.png', function(img) {
  img.set({
    left: insideHandle.getLeft(),
    top: 0,
    width: charmAppHW,
    height: charmAppHW,
    originX: 'center',
    originY: 'top',
    visible: true
  });
  canvas.add(img).setActiveObject(img);
  weatherPic = canvas.getActiveObject();
  weatherPic.lockMovementX = true;
  weatherPic.lockMovementY = true;}
);

var degrees = new fabric.Text("72Â°",{
  left: insideHandle.getLeft(),
  top: localHeight/8,
  originX: 'center',
  originY: 'center',
  fontWeight: 'bold',
  shadow: "rgba(0,0,0,0.2) 0px 0px 10px",
  visible: true,
  fontFamily: 'droid serif',
  fontSize: 70,
  lockMovementX: true,
  lockMovementY: true
});

function setTemp()
{
  celsius ? degrees.setText(degrees.getText() + "C") : degrees.setText(degrees.getText() + "F");
  canvas.renderAll(); 
}
//-----END-WEATHER------------------------------------


/*-----------------------------------------------------------------
* CHARMS BAR
*  -appIcon
*  -emergencyIcon
*  -settingsIcon
*  -userIcon
*///---------------------------------------------------------------

var userIcon = new fabric.Image.fromURL('resources/single.png', function(img) {
  img.set({
    left: topLeftInsideDoor + charmOffsetX,
    top: charmOffsetY,
    width: charmAppHW,
    height: charmAppHW,
    originX: 'left',
    originY: 'top',
    visible: true
  });
  canvas.add(img).setActiveObject(img);
  userPic = canvas.getActiveObject();

  userPic.on('moving', function animate(){
    emergencyPic.top = userPic.getTop() + quarterDoorHeight;
    appPic.top = emergencyPic.getTop() + quarterDoorHeight;
    settingsPic.top = appPic.getTop() + quarterDoorHeight;
    moveUsers();
    debugLog();
    canvas.renderAll();
  });

  userPic.on('selected', function (){
    if(userSelect){
      showUsers(true);
    }else{
      showUsers(false);
    }
    moveUsers();
    userSelect = !userSelect;
    postCharmMove();
    canvas.deactivateAll();
  });

  userPic.on('modified', function (){
    postCharmMove();
  });

  userPic.lockMovementX = true;
  userPic.lockMovementY = false;}
);


var emergencyIcon =  new fabric.Image.fromURL('resources/shield.png', function(img) {
  img.set({
    left: topLeftInsideDoor + charmOffsetX,
    top: quarterDoorHeight + charmOffsetY,
    width: charmAppHW,
    height: charmAppHW,
    originX: 'left',
    originY: 'top',
    visible: true
  });
  canvas.add(img).setActiveObject(img);
  emergencyPic = canvas.getActiveObject();

  emergencyPic.on('selected', function (){
    canvas.deactivateAll();
  });

  emergencyPic.on('moving', function animate(){
    userPic.top = emergencyPic.getTop() - quarterDoorHeight;
    appPic.top = emergencyPic.getTop() + quarterDoorHeight;
    settingsPic.top = appPic.getTop() + quarterDoorHeight;
    moveUsers();
    debugLog();
    canvas.renderAll();
  });

  emergencyPic.on('modified', function (){
    postCharmMove();
  });

  emergencyPic.lockMovementX = true; 
  emergencyPic.lockMovementY = false;}
);


var appIcon = new fabric.Image.fromURL('resources/app.png', function(img) {
  img.set({
    left: topLeftInsideDoor + charmOffsetX,
    top: (quarterDoorHeight * 2) + charmOffsetY,
    width: charmAppHW,
    height: charmAppHW,
    originX: 'left',
    originY: 'top',
    visible: true
  });
  canvas.add(img).setActiveObject(img);
  appPic = canvas.getActiveObject();

  appPic.on('selected', function (){
    canvas.deactivateAll();
  });

  appPic.on('moving', function animate(){
    userPic.top = emergencyPic.getTop() - quarterDoorHeight;
    settingsPic.top = appPic.getTop() + quarterDoorHeight;
    emergencyPic.top = appPic.getTop() - quarterDoorHeight;
    moveUsers();
    debugLog();
    canvas.renderAll();
  });

  appPic.on('modified', function (){
    postCharmMove();
  });

  appPic.lockMovementX = true;
  appPic.lockMovementY = false;}
);


var settingsIcon = new fabric.Image.fromURL('resources/settings.png', function(img) {
  img.set({
    left: topLeftInsideDoor + charmOffsetX,
    top: (quarterDoorHeight * 3) + charmOffsetY,
    width: charmAppHW,
    height: charmAppHW,
    originX: 'left',
    originY: 'top',
    visible: true
  });
  canvas.add(img).setActiveObject(img);
  settingsPic = canvas.getActiveObject();

  settingsPic.on('selected', function (){
    canvas.deactivateAll();
  });

  settingsPic.on('moving', function animate(){
    userPic.top = emergencyPic.getTop() - quarterDoorHeight;
    appPic.top = settingsPic.getTop() - quarterDoorHeight;
    emergencyPic.top = appPic.getTop() - quarterDoorHeight;
    moveUsers();
    debugLog();
    canvas.renderAll();
  });

  settingsPic.on('modified', function (){
    postCharmMove();
  });

  settingsPic.lockMovementX = true;
  settingsPic.lockMovementY = false;}
);



/*function slideDown()
{
  var tempGroup = charmsBar;

  charmsBar = new fabric.Group([ charmsBar[3], charmsBar[0], charmsBar[1], charmsBar[2] ], {
    left: tempGroup.getLeft(),
    top: tempGroup.getTop()
  });
}

function slideUp()
{
  var tempGroup = charmsBar;

  charmsBar = new fabric.Group([ charmsBar[1], charmsBar[2], charmsBar[3], charmsBar[0] ], {
    left: tempGroup.getLeft(),
    top: tempGroup.getTop()
  });
}*/

function moveCharms()
{
  /*if(y < charmAppHW)
  {
    slideUp()
  }
  else if(y > localHeight - charmAppHW)
  {
    slideDown()
  }*/


}


//--------------------END-CHARMS-BAR-------------------------------

//----USER-ICONS----------------------------

var devinIcon = new fabric.Image.fromURL('resources/duck.png', function(img) {
  img.set({
    left: userPic.left + userPic.width + userOffsetX,
    top: userPic.top,
    width: charmAppHW,
    height: charmAppHW,
    originX: 'left',
    originY: 'top',
    visible: false
  });
  img.on('added', function ()
  {
    devinText.top = img.top + img.height;
    devinText.left = img.left;
    canvas.renderAll();
  });
  canvas.add(img).setActiveObject(img);
  devinPic = canvas.getActiveObject();
  devinPic.on('moving', function animate(){
    canvas.deactivateAll().renderAll();
  });



  devinPic.lockMovementX = true;
  devinPic.lockMovementY = false;}
);


var tomIcon = new fabric.Image.fromURL('resources/pig.png', function(img) {
  img.set({
    left: userPic.left + (2 * (userPic.width + userOffsetX)),
    top: userPic.top,
    width: charmAppHW,
    height: charmAppHW,
    originX: 'left',
    originY: 'top',
    visible: false
  });
  img.on('added', function ()
  {
    tomText.top = img.top + img.height;
    tomText.left = img.left;
    canvas.renderAll();
  });
  canvas.add(img).setActiveObject(img);
  tomPic = canvas.getActiveObject();
  tomPic.on('moving', function animate(){
    canvas.deactivateAll().renderAll();
  });
  userPic.lockMovementX = true;
  userPic.lockMovementY = false;}
);

var mattIcon = new fabric.Image.fromURL('resources/lamb.png', function(img) {
  img.set({
    left: userPic.left + (3 * (userPic.width + userOffsetX)),
    top: userPic.top,
    width: charmAppHW,
    height: charmAppHW,
    originX: 'left',
    originY: 'top',
    visible: false
  });
  img.on('added', function ()
  {
    mattText.top = img.top + img.height;
    mattText.left = img.left;
    canvas.renderAll();
  });
  canvas.add(img).setActiveObject(img);
  mattPic = canvas.getActiveObject();
  mattPic.on('moving', function animate(){
    canvas.deactivateAll().renderAll();
  });
  mattPic.lockMovementX = true;
  mattPic.lockMovementY = false;}
);

var mikeIcon = new fabric.Image.fromURL('resources/dog.png', function(img) {
  img.set({
    left: userPic.left + userPic.width + userOffsetX,
    top: userPic.top + userPic.height + userOffsetY,
    width: charmAppHW,
    height: charmAppHW,
    originX: 'left',
    originY: 'top',
    visible: false
  });
  img.on('added', function ()
  {
    mikeText.top = img.top + img.height;
    mikeText.left = img.left;
    canvas.renderAll();
  });
  canvas.add(img).setActiveObject(img);
  mikePic = canvas.getActiveObject();
  mikePic.on('moving', function animate(){
    canvas.deactivateAll().renderAll();
  });
  mikePic.lockMovementX = true;
  mikePic.lockMovementY = false;}
);

var ryanIcon = new fabric.Image.fromURL('resources/eagle.png', function(img) {
  img.set({
    left: userPic.left + (2 * (userPic.width + userOffsetX)),
    top: userPic.top + userPic.height + userOffsetY,
    width: charmAppHW,
    height: charmAppHW,
    originX: 'left',
    originY: 'top',
    visible: false
  });
  img.on('added', function ()
  {
    ryanText.top = img.top + img.height;
    ryanText.left = img.left;
    canvas.renderAll();
  });
  canvas.add(img).setActiveObject(img);
  ryanPic = canvas.getActiveObject();
  ryanPic.on('moving', function animate(){
    canvas.deactivateAll().renderAll();
  });
  ryanPic.lockMovementX = true;
  ryanPic.lockMovementY = false;}
);

var addUserIcon = new fabric.Image.fromURL('resources/addUser.png', function(img) {
  img.set({
    left: userPic.left + (3 * (userPic.width + userOffsetX)),
    top: userPic.top + userPic.height + userOffsetY,
    width: charmAppHW,
    height: charmAppHW,
    originX: 'left',
    originY: 'top',
    visible: false
  });
  img.on('added', function ()
  {
    canvas.renderAll();
  });
  canvas.add(img).setActiveObject(img);
  addUserPic = canvas.getActiveObject();
  addUserPic.on('moving', function animate(){
    canvas.deactivateAll().renderAll();
  });
  addUserPic.lockMovementX = true;
  addUserPic.lockMovementY = false;}
);

var tomText = new fabric.Text("Tom",{  
  left: tomIcon.left,
  top: tomIcon.top,
  originX: 'left',
  originY: 'top',
  fontWeight: 'bold',
  shadow: "rgba(0,0,0,0.2) 0px 0px 10px",
  visible: false,
  fontFamily: 'droid serif',
  fontSize: 50,
  lockMovementX: true,
  lockMovementY: true
});

var mikeText = new fabric.Text("Mike",{  
  left: mikeIcon.left,
  top: mikeIcon.top,
  originX: 'left',
  originY: 'top',
  fontWeight: 'bold',
  shadow: "rgba(0,0,0,0.2) 0px 0px 10px",
  visible: false,
  fontFamily: 'droid serif',
  fontSize: 50,
  lockMovementX: true,
  lockMovementY: true
});

var ryanText = new fabric.Text("Ryan",{  
  left: ryanIcon.left,
  top: ryanIcon.top,
  originX: 'left',
  originY: 'top',
  fontWeight: 'bold',
  shadow: "rgba(0,0,0,0.2) 0px 0px 10px",
  visible: false,
  fontFamily: 'droid serif',
  fontSize: 50,
  lockMovementX: true,
  lockMovementY: true
});

var mattText = new fabric.Text("Matt",{  
  left: mattIcon.left,
  top: mattIcon.top,
  originX: 'left',
  originY: 'top',
  fontWeight: 'bold',
  shadow: "rgba(0,0,0,0.2) 0px 0px 10px",
  visible: false,
  fontFamily: 'droid serif',
  fontSize: 50,
  lockMovementX: true,
  lockMovementY: true
});

var devinText  = new fabric.Text("Devin",{  
  left: devinIcon.left,
  top: devinIcon.top,
  originX: 'left',
  originY: 'top',
  fontWeight: 'bold',
  shadow: "rgba(0,0,0,0.2) 0px 0px 10px",
  visible: false,
  fontFamily: 'droid serif',
  fontSize: 50,
  lockMovementX: true,
  lockMovementY: true
});

function showUsers(visible)
{
  ryanPic.visible = visible;
  mikePic.visible = visible;
  devinPic.visible = visible;
  mattPic.visible = visible;
  tomPic.visible = visible;
  ryanText.visible = visible;
  mikeText.visible = visible;
  devinText.visible = visible;
  mattText.visible = visible;
  tomText.visible = visible;
  addUserPic.visible = visible; 
}

function moveUsers()
{
  devinPic.top = userPic.top;
  mattPic.top = userPic.top;
  tomPic.top = userPic.top;
  ryanPic.top = userPic.top + userPic.height + userOffsetY;
  mikePic.top = userPic.top + userPic.height + userOffsetY;
  addUserPic.top =  userPic.top + userPic.height + userOffsetY;
  devinText.top = devinPic.top + userPic.height;
  devinText.left = devinPic.left;
  mattText.top = mattPic.top + userPic.height;
  mattText.left = mattPic.left;
  ryanText.top = ryanPic.top + userPic.height;
  ryanText.left = ryanPic.left;
  tomText.top = tomPic.top + userPic.height;
  tomText.left = tomPic.left;
  mikeText.top = mikePic.top + userPic.height;
  mikeText.left = mikePic.left;
}

function postCharmMove()
{
  userIcon.top = userPic.top;
  userIcon.left = userPic.left;
  emergencyIcon.top = emergencyPic.top;
  emergencyIcon.left = emergencyPic.left;
  appIcon.top = appPic.top;
  appIcon.left = appPic.left;
  settingsIcon.top = settingsPic.top;
  settingsIcon.left = settingsPic.left;

  userPic.setCoords();
  emergencyPic.setCoords();
  appPic.setCoords();
  settingsPic.setCoords();

  debugLog();

  canvas.deactivateAll().renderAll().calcOffset();
}

//----END-USER-ICONS------------------------


// add all of the elements to the canvas
//canvas.add(charmsBar);
canvas.add(insideDoor);
canvas.add(outsideDoor);
canvas.add(insideHandle);
canvas.add(outsideHandle);
canvas.add(clock);
canvas.add(date);
canvas.add(amPm);
canvas.add(degrees);
canvas.add(debug);
canvas.add(mikeText);
canvas.add(mattText);
canvas.add(tomText);
canvas.add(ryanText);
canvas.add(devinText);


// code adapted from http://jsfiddle.net/tornado1979/39up3jcm/
// this code deals with scaling all the elements on the canvas

function zoomAll(SCALE_FACTOR) {

      var objects = canvas.getObjects();
      for (var i in objects) {
          var scaleX = objects[i].scaleX;
          var scaleY = objects[i].scaleY;
          var left = objects[i].left;
          var top = objects[i].top;

          var tempScaleX = scaleX * SCALE_FACTOR;
          var tempScaleY = scaleY * SCALE_FACTOR;
          var tempLeft = left * SCALE_FACTOR;
          var tempTop = top * SCALE_FACTOR;

          objects[i].scaleX = tempScaleX;
          objects[i].scaleY = tempScaleY;
          objects[i].left = tempLeft;
          objects[i].top = tempTop;

          objects[i].setCoords();
      }
  
      canvas.renderAll();
  }

// draw everything at the appropriate scale for this canvas
zoomAll(canvas.height / localHeight);


</script>

</body>
      
</html>